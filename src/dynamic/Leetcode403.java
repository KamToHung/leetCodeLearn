package dynamic;

/**
 * 一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不
 * 给你石子的位置列表 stones（用单元格序号 升序 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。
 * 开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。
 * 如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1 个单位。 另请注意，青蛙只能向前
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：stones = [0,1,3,5,6,8,12,17]
 * 输出：true
 * 解释：青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位
 * 后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。
 * 示例 2：
 * <p>
 * 输入：stones = [0,1,2,3,4,8,9,11]
 * 输出：false
 * 解释：这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。
 * 解答思路：
 * 动态转移方程式：f(x,y) = f(x-1,y-1) || f(x-1,y) || f(x-1,y+1)
 * 上面分析有点问题，因为不一定是前一位，可能是前N块时候跳跃长度
 * 索引动态转移方程式：f(x,y) = f(w,y-1) || f(w,y) || f(w,y+1) w为前面走过的石头，y为跳跃的单位长度，x为当前石头
 * 出口：f(x,y) = true
 */
public class Leetcode403 {

    public boolean canCross(int[] stones) {
        int len = stones.length;
        boolean[][] dp = new boolean[len][len];
        dp[0][0] = true;
        for (int i = 1; i < stones.length; i++) {
            // 从后面开始，因为后面可能跳跃的单位长度y更大
            for (int j = i - 1; j >= 0; j--) {
                // 跳跃的单位长度
                int k = stones[i] - stones[j];
                // 最大跳跃距离为j+1,比如j为3的时候，数组位置为4，最多跳跃4。超过4则跳不过
                if (k > j + 1) {
                    break;
                }
                dp[i][k] = dp[j][k] || dp[j][k - 1] || dp[j][k + 1];
                // 优化，判断最后位置即可
                if (i == len - 1 && dp[i][k]) {
                    return true;
                }
            }
        }
        // 跳跃长度如果只要有一个满足则返回true(k-1,k,k+1)
        //for(int i = 0;i<len;i++) {
        //    if(dp[len-1][i]) {
        //        return true;
        //    }
        //}
        return false;
    }
}
